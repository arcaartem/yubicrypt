#!/bin/bash

# Yubikey FIDO2 SSH Key Encrypt/Decrypt Tool
# Uses existing FIDO2 SSH keys for encryption

set -e

SCRIPT_NAME=$(basename "$0")

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1" >&2
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1" >&2
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1" >&2
}

usage() {
    echo "Usage: $SCRIPT_NAME [OPTIONS] COMMAND"
    echo ""
    echo "COMMANDS:"
    echo "  encrypt [TEXT]     Encrypt text using FIDO2 SSH key (outputs to stdout)"
    echo "  decrypt [TEXT]     Decrypt text using FIDO2 SSH key (from stdin or argument)"
    echo ""
    echo "OPTIONS:"
    echo "  -k, --key PATH     SSH key file to use"
    echo "  -h, --help         Show this help message"
    echo ""
    echo "ENVIRONMENT VARIABLES:"
    echo "  SSH_KEY_FILE       Path to SSH key file (alternative to -k option)"
    echo ""
    echo "EXAMPLES:"
    echo "  $SCRIPT_NAME -k ~/.ssh/id_ecdsa_sk encrypt 'My secret password'"
    echo "  echo 'My secret' | $SCRIPT_NAME -k ~/.ssh/id_ecdsa_sk encrypt"
    echo "  echo 'encrypted_data' | $SCRIPT_NAME -k ~/.ssh/id_ecdsa_sk decrypt"
    echo "  $SCRIPT_NAME -k ~/.ssh/id_ecdsa_sk decrypt 'challenge:iv:encrypted_data'"
    echo ""
    echo "  # Using environment variable:"
    echo "  export SSH_KEY_FILE=~/.ssh/id_ecdsa_sk"
    echo "  $SCRIPT_NAME encrypt 'My secret password'"
    echo "  echo 'encrypted_data' | $SCRIPT_NAME decrypt"
}

check_dependencies() {
    local missing_deps=()
    
    for cmd in openssl ssh-keygen ykman; do
        if ! command -v "$cmd" &> /dev/null; then
            missing_deps+=("$cmd")
        fi
    done
    
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        log_error "Missing required dependencies: ${missing_deps[*]}"
        [[ " ${missing_deps[*]} " =~ " ykman " ]] && log_info "Install ykman with: brew install ykman"
        exit 1
    fi
}

check_yubikey() {
    if ! ykman info >/dev/null 2>&1; then
        log_error "YubiKey not detected. Please insert your YubiKey."
        exit 1
    fi
}

validate_ssh_key() {
    local ssh_key="$1"
    
    if [[ ! -f "$ssh_key" ]]; then
        log_error "SSH key file not found: $ssh_key"
        exit 1
    fi
    
    if [[ ! -r "$ssh_key" ]]; then
        log_error "SSH key file is not readable: $ssh_key"
        exit 1
    fi
    
    local key_info
    if ! key_info=$(ssh-keygen -l -f "$ssh_key" 2>/dev/null); then
        log_error "Invalid SSH key file: $ssh_key"
        log_info "Make sure the file is a valid SSH private key"
        exit 1
    fi
    
    if [[ ! "$key_info" =~ SK ]]; then
        log_error "SSH key is not a FIDO2 security key. Key info: $key_info"
        log_info "FIDO2 SSH keys should contain 'SK' in their type description"
        log_info "Create a FIDO2 SSH key with:"
        log_info "  ssh-keygen -t ecdsa-sk -f ~/.ssh/id_ecdsa_sk -O resident"
        log_info "  ssh-keygen -t ed25519-sk -f ~/.ssh/id_ed25519_sk -O resident"
        exit 1
    fi
    
    log_info "Using SSH key: $ssh_key"
    log_info "Key info: $key_info"
}

sign_challenge_with_ssh_key() {
    local challenge="$1"
    local ssh_key="$2"
    
    log_info "Signing challenge with FIDO2 SSH key..."
    log_warning "Touch your YubiKey when it blinks..."
    
    local temp_file=$(mktemp)
    echo -n "$challenge" > "$temp_file"
    
    local signature
    if signature=$(ssh-keygen -Y sign -f "$ssh_key" -n "encrypt-decrypt-challenge" "$temp_file" 2>/dev/null); then
        rm -f "$temp_file"
        echo "$signature"
    else
        rm -f "$temp_file"
        log_error "Failed to sign challenge with SSH key"
        log_info "Make sure you touch the YubiKey when prompted"
        exit 1
    fi
}

derive_key_from_ssh_signature() {
    local challenge="$1"
    local ssh_key="$2"
    
    local signature=$(sign_challenge_with_ssh_key "$challenge" "$ssh_key")
    local fingerprint=$(ssh-keygen -l -f "$ssh_key" 2>/dev/null | awk '{print $2}')
    local key_material="${signature}${challenge}${fingerprint}"
    
    local derived_key=$(echo -n "$key_material" | openssl dgst -sha256 -binary | openssl dgst -sha256 -hex | cut -d' ' -f2)
    
    if [[ -z "$derived_key" ]]; then
        log_error "Failed to derive key from SSH signature"
        exit 1
    fi
    
    echo "$derived_key"
}

encrypt_text() {
    local text="$1"
    local ssh_key="$2"
    
    if [[ -z "$text" ]]; then
        text=$(cat)
    fi
    
    if [[ -z "$text" ]]; then
        log_error "No text provided to encrypt"
        exit 1
    fi
    
    local challenge=$(openssl rand -base64 32 | tr -d '=' | tr '/+' '_-')
    local derived_key=$(derive_key_from_ssh_signature "$challenge" "$ssh_key")
    
    log_info "Encrypting text using SSH key-derived encryption key..."
    
    local iv=$(openssl rand -hex 16)
    local encrypted_text=$(echo -n "$text" | openssl enc -aes-256-cbc -base64 -K "$derived_key" -iv "$iv")
    
    echo "${challenge}:${iv}:${encrypted_text}"
    log_success "Text encrypted and output to stdout"
}

decrypt_text() {
    local encrypted_data="$1"
    local ssh_key="$2"
    
    local combined_data
    if [[ -n "$encrypted_data" ]]; then
        log_info "Decrypting data from command line argument using SSH key..."
        combined_data="$encrypted_data"
    else
        log_info "Decrypting data from stdin using SSH key..."
        combined_data=$(cat)
    fi
    
    if [[ -z "$combined_data" ]]; then
        log_error "No encrypted data provided (either as argument or on stdin)"
        exit 1
    fi
    
    local challenge=$(echo "$combined_data" | cut -d':' -f1)
    local iv=$(echo "$combined_data" | cut -d':' -f2)
    local encrypted_text=$(echo "$combined_data" | cut -d':' -f3-)
    
    local derived_key=$(derive_key_from_ssh_signature "$challenge" "$ssh_key")
    
    local decrypted_text
    if ! decrypted_text=$(echo "$encrypted_text" | openssl enc -aes-256-cbc -d -base64 -K "$derived_key" -iv "$iv" 2>/dev/null) || [[ -z "$decrypted_text" ]]; then
        log_error "Decryption failed. Wrong key or corrupted data."
        exit 1
    fi
    
    echo "$decrypted_text"
}

# Parse command line arguments
SSH_KEY_FILE="${SSH_KEY_FILE:-}"
COMMAND=""
TEXT_ARG=""

while [[ $# -gt 0 ]]; do
    case $1 in
        -k|--key)
            SSH_KEY_FILE="$2"
            shift 2
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        encrypt|decrypt)
            COMMAND="$1"
            shift
            TEXT_ARG="$*"
            break
            ;;
        *)
            log_error "Unknown option: $1"
            usage
            exit 1
            ;;
    esac
done

# Validate inputs
if [[ -z "$COMMAND" ]]; then
    usage
    exit 1
fi

if [[ -z "$SSH_KEY_FILE" ]]; then
    log_error "SSH key file is required. Use -k/--key option or set SSH_KEY_FILE environment variable."
    usage
    exit 1
fi

# Validate SSH key and check dependencies
validate_ssh_key "$SSH_KEY_FILE"
check_dependencies
check_yubikey

# Execute command
case "$COMMAND" in
    encrypt)
        encrypt_text "$TEXT_ARG" "$SSH_KEY_FILE"
        ;;
    decrypt)
        decrypt_text "$TEXT_ARG" "$SSH_KEY_FILE"
        ;;
esac 